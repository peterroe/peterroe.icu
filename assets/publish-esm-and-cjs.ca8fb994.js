import{_ as o}from"./Post.c7757a6b.js";import{j as l,k as c,g as p,o as i,a as n,i as s}from"./vendor.2adeb70a.js";import"./app.0a4f0146.js";const u=n("div",{class:"prose m-auto"},[n("p",null,[n("div",{class:"table-of-contents"},[n("ul",null,[n("li",null,[n("a",{href:"#esm-cjs"},"ESM & CJS ")]),n("li",null,[n("a",{href:"#compatibility"},"Compatibility "),n("ul",null,[n("li",null,[n("a",{href:"#package-json"},"package.json ")])])]),n("li",null,[n("a",{href:"#bundling"},"Bundling "),n("ul",null,[n("li",null,[n("a",{href:"#tsup"},"tsup ")]),n("li",null,[n("a",{href:"#unbuild"},"unbuild ")])])]),n("li",null,[n("a",{href:"#context-misalignment"},"Context Misalignment ")]),n("li",null,[n("a",{href:"#final-words"},"Final words ")])])])]),n("h2",{id:"esm-cjs",tabindex:"-1"},[s("ESM & CJS "),n("a",{class:"header-anchor",href:"#esm-cjs","aria-hidden":"true"},"#")]),n("ul",null,[n("li",null,[s("ESM - "),n("a",{href:"https://nodejs.org/api/esm.html",target:"_blank",rel:"noopener"},"ECMAScript modules")]),n("li",null,[s("CJS - "),n("a",{href:"https://nodejs.org/api/modules.html#modules-commonjs-modules",target:"_blank",rel:"noopener"},"CommonJS")])]),n("p",null,[s("In the past decade, due to the lack of a standard module system of JavaScript, CommonJS (a.k.a the "),n("code",null,"require('xxx')"),s(" and "),n("code",null,"module.exports"),s(" syntax) has been the way how Node.js and NPM packages work. Until 2015, when ECMAScript modules finally show up as the standard solution, the community start migrating to native ESM gradually.")]),n("pre",{class:"language-js"},[n("code",{class:"language-js"},[n("span",{class:"token comment"},"// CJS"),s(`
`),n("span",{class:"token keyword"},"const"),s(" circle "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'./circle.js'"),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"The area of a circle of radius 4 is "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("circle"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"area"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("pre",{class:"language-js"},[n("code",{class:"language-js"},[n("span",{class:"token comment"},"// ESM"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" area "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'./circle.mjs'"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"The area of a circle of radius 4 is "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token function"},"area"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,"ESM enables named exports, better static analysis, tree-shaking, browsers native support, and most importantly, as a standard, it\u2019s basically the future of JavaScript."),n("p",null,[s("Experimental support of native ESM is introduced in Node.js v12, and stabilized in v12.22.0 and v14.17.0. As the end of 2021, many packages now ship in pure-ESM format, or CJS and ESM dual formats; meta-frameworks like "),n("a",{href:"https://github.com/nuxt/framework",target:"_blank",rel:"noopener"},"Nuxt 3"),s(" and "),n("a",{href:"https://github.com/sveltejs/kit",target:"_blank",rel:"noopener"},"SvelteKit"),s(" are now recommending users to use ESM-first environment.")]),n("p",null,"The overall migration of the ecosystem is still in progress, for most library authors, shipping dual formats is a safer and smoother way to have the goods from both worlds. In the rest of this blog post, I will show you why and how."),n("h2",{id:"compatibility",tabindex:"-1"},[s("Compatibility "),n("a",{class:"header-anchor",href:"#compatibility","aria-hidden":"true"},"#")]),n("p",null,[s("If ESM is the better and the future, why don\u2019t we all move to ESM then? Even though Node.js is smart enough to allow CJS and ESM packages to work together, the main blocker is that "),n("strong",null,"you can\u2019t use ESM packages in CJS"),s(".")]),n("p",null,"If you do:"),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// in CJS"),s(`
`),n("span",{class:"token keyword"},"const"),s(" pkg "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'esm-only-package'"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,"you will receive the following error"),n("pre",{class:"language-bash"},[n("code",{class:"language-bash"},[s("Error "),n("span",{class:"token punctuation"},"["),s("ERR_REQUIRE_ESM"),n("span",{class:"token punctuation"},"]"),s(": require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(` of ES Module esm-only-package not supported.
`)])]),n("p",null,[s("The root cause is that ESM is asynchronous by nature, meaning you can\u2019t import an async module in synchronous context that "),n("code",null,"require"),s(" is for. This commonly means "),n("strong",null,"if you want to use ESM packages, you have to use ESM as well"),s(". Only one exception is that you can use ESM package in CJS using "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports",target:"_blank",rel:"noopener"},[s("dynamic "),n("code",null,"import()")]),s(":")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// in CJS"),s(`
`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"default"),n("span",{class:"token operator"},":"),s(" pkg "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"await"),s(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'esm-only-package'"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("Since dynamic import will return a Promise, meaning all the sub-sequential callee need to be async as well (so call "),n("a",{href:"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/",target:"_blank",rel:"noopener"},"Red Functions"),s(", or I prefer call it Async Infection). In some case it might work, but generally I won\u2019t think this to be an easy approachable solution for users.")]),n("p",null,[s("On the other hand, if you are able to go with ESM directly, it would be much easier as "),n("code",null,"import"),s(" supports both ESM and CJS.")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// in ESM"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" named "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'esm-package'"),s(`
`),n("span",{class:"token keyword"},"import"),s(" cjs "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'cjs-package'"),s(` 
`)])]),n("p",null,[s("Some packages now ship "),n("a",{href:"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c",target:"_blank",rel:"noopener"},"pure-ESM packages"),s(' advocating the ecosystem to move from CJS to ESM. While this might be the "right thing to do", however, giving the fact that that majority of the ecosystem are still on CJS and the migration is not that easy, I found myself more lean to ship both CJS and ESM formats to make the transition smoother.')]),n("h3",{id:"package-json",tabindex:"-1"},[n("code",null,"package.json"),s(),n("a",{class:"header-anchor",href:"#package-json","aria-hidden":"true"},"#")]),n("p",null,[s("Luckily, Node allows you to have those two formats in a single package at the same time. With the new "),n("a",{href:"https://nodejs.org/api/packages.html#conditional-exports",target:"_blank",rel:"noopener"},[n("code",null,"exports")]),s(" field in "),n("code",null,"package.json"),s(", you can now specify multiple entries to provide those formats conditionally. Node will resolve to the version based on user\u2019s or downstream packages environment.")]),n("pre",{class:"language-json"},[n("code",{class:"language-json"},[n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"name"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"my-cool-package"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"exports"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"."'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"require"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./index.cjs"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// CJS"),s(`
      `),n("span",{class:"token property"},'"import"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./index.mjs"'),s("   "),n("span",{class:"token comment"},"// ESM"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("h2",{id:"bundling",tabindex:"-1"},[s("Bundling "),n("a",{class:"header-anchor",href:"#bundling","aria-hidden":"true"},"#")]),n("p",null,"So now we have two copies of code with slightly different module syntax to maintain, duplicating them is of course not an ideal solution. At this point you might need to consider introducing some build tools or bundling process to build your code into multiple formats. This might remind you the nightmare of configuring complex Webpack or Rollup, well don\u2019t worry, my mission today is to introduce you two awesome tools that make your life so much easier."),n("ul",null,[n("li",null,[n("a",{href:"#tsup"},[n("code",null,"tsup")])]),n("li",null,[n("a",{href:"#unbuild"},[n("code",null,"unbuild")])])]),n("h3",{id:"tsup",tabindex:"-1"},[s("tsup "),n("a",{class:"header-anchor",href:"#tsup","aria-hidden":"true"},"#")]),n("p",null,[n("a",{href:"https://github.com/egoist/tsup",target:"_blank",rel:"noopener"},[n("code",null,"tsup")]),s(" by "),n("a",{href:"https://github.com/egoist",target:"_blank",rel:"noopener"},"@egoist"),s(" is one of my most used tools. The features zero-config building for TypeScript project. The usage is like:")]),n("pre",{class:"language-bash"},[n("code",{class:"language-bash"},`$ tsup src/index.ts
`)]),n("p",null,[s("And then you will have "),n("code",null,"dist/index.js"),s(" file ready for you to publish.")]),n("p",null,"To support dual formats, it\u2019s just a flag away:"),n("pre",{class:"language-bash"},[n("code",{class:"language-bash"},`$ tsup src/index.ts --format cjs,esm
`)]),n("p",null,[s("Two files "),n("code",null,"dist/index.js"),s(" and "),n("code",null,"dist/index.mjs"),s(" will be generated with it and you are good to go. Powered by "),n("a",{href:"https://github.com/evanw/esbuild",target:"_blank",rel:"noopener"},[n("code",null,"esbuild")]),s(", "),n("code",null,"tsup"),s(" is not only super easy to use but also incredible fast. I highly recommend to give it a try.")]),n("p",null,[s("Here is my go-to template of "),n("code",null,"package.json"),s(" using "),n("code",null,"tsup"),s(":")]),n("pre",{class:"language-json"},[n("code",{class:"language-json"},[n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"name"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"my-cool-package"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"main"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./dist/index.js"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"module"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./dist/index.mjs"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"types"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./dist/index.d.ts"'),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"exports"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"."'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"require"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./dist/index.js"'),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token property"},'"import"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./dist/index.mjs"'),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token property"},'"types"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"./dist/index.d.ts"'),s(`      
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"scripts"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"build"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"tsup src/index.ts --format cjs,esm --dts --clean"'),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token property"},'"watch"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"npm run build -- --watch src"'),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token property"},'"prepublishOnly"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"npm run build"'),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("h3",{id:"unbuild",tabindex:"-1"},[s("unbuild "),n("a",{class:"header-anchor",href:"#unbuild","aria-hidden":"true"},"#")]),n("p",null,[s("If we say "),n("code",null,"tsup"),s(" is a minimal bundler for TypeScript, "),n("a",{href:"https://github.com/unjs/unbuild",target:"_blank",rel:"noopener"},[n("code",null,"unbuild")]),s(" by the "),n("a",{href:"https://github.com/unjs",target:"_blank",rel:"noopener"},"@unjs org"),s(" is a more generalized, customizable and yet powerful. "),n("code",null,"unbuild"),s(" is being used to bundle Nuxt 3 and it\u2019s sub packages.")]),n("p",null,[s("To use it, we create "),n("code",null,"build.config.ts"),s(" file in the root")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// build.config.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBuildConfig "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'unbuild'"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token function"},"defineBuildConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  entries`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},"'./src/index'"),s(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  declaration`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// generate .d.ts files"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("and run the "),n("code",null,"unbuild"),s(" command:")]),n("pre",{class:"language-bash"},[n("code",{class:"language-bash"},`$ unbuild
`)]),n("p",null,[n("code",null,"unbuild"),s(" will generate both ESM and CJS for you by default!")]),n("h4",{id:"stubbing",tabindex:"-1"},[s("Stubbing "),n("a",{class:"header-anchor",href:"#stubbing","aria-hidden":"true"},"#")]),n("p",null,[s("This is one of the most incredible things that I have found when I first looked into "),n("a",{href:"https://github.com/nuxt/framework",target:"_blank",rel:"noopener"},"Nuxt 3\u2019s codebase"),s(". "),n("code",null,"unbuild"),s(" introduced a new idea called Stubbing. Instead of firing up a watcher to re-trigger the bundling every time you made changes to the source code, the stubbing in "),n("code",null,"unbuild"),s(" (so call Passive watcher) does not require you are have another process for that at all. By calling the following command "),n("strong",null,"only once"),s(":")]),n("pre",{class:"language-bash"},[n("code",{class:"language-bash"},`$ unbuild --stub
`)]),n("p",null,"You are able to play and test out with your library with the up-to-date code!"),n("p",null,"Want to know the magic? After running the stubbing command, you can check out the generated distribution files:"),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// dist/index.mjs"),s(`
`),n("span",{class:"token keyword"},"import"),s(" jiti "),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'jiti'"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token function"},"jiti"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" interopDefault"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'/Users/antfu/unbuild-test/src/index'"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// dist/index.cjs"),s(`
module`),n("span",{class:"token punctuation"},"."),s("exports "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'jiti'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(" interopDefault"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'/Users/antfu/unbuild-test/src/index'"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("Instead of the distribution of your code bundle, the dist files are now redirecting to your source code with a wrap of "),n("a",{href:"https://github.com/unjs/jiti",target:"_blank",rel:"noopener"},[n("code",null,"jiti")]),s(" - another treasure hidden in the "),n("a",{href:"https://github.com/unjs",target:"_blank",rel:"noopener"},"@unjs"),s(" org. "),n("code",null,"jiti"),s(" provides the runtime support of TypeScript, ESM for Node by transpiling the modules on the fly. Since it directly goes to your source files, there won\u2019t be a misalignment between your source code and bundle dist - thus there is no watcher process needed! This is a huge DX bump for library authors, if you still not getting it, you shall definitely grab it down and play with it yourself.")]),n("h4",{id:"bundleless-build",tabindex:"-1"},[s("Bundleless Build "),n("a",{class:"header-anchor",href:"#bundleless-build","aria-hidden":"true"},"#")]),n("p",null,[s("Powered by "),n("a",{href:"https://github.com/unjs/mkdist",target:"_blank",rel:"noopener"},[n("code",null,"mkdist")]),s(" - another "),n("a",{href:"https://github.com/unjs",target:"_blank",rel:"noopener"},"@unjs"),s(" package - "),n("code",null,"unbuild"),s(" also handles static assets and file-to-file transpiling. Bundleless build allows you to keep the structure of your source code, made easy for importing submodules on-demand to optimizing performance and more.")]),n("p",null,[s("Config in "),n("code",null,"unbuild"),s(" will look like:")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// build.config.ts"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBuildConfig "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'unbuild'"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token function"},"defineBuildConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  entries`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token comment"},"// bundling"),s(`
    `),n("span",{class:"token string"},"'src/index'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token comment"},"// bundleless, or just copy assets"),s(`
    `),n("span",{class:"token punctuation"},"{"),s(" input"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'src/components/'"),n("span",{class:"token punctuation"},","),s(" outDir"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'dist/components'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  declaration`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("One of the coolest features on this is that it handles "),n("code",null,".vue"),s(" file out-of-box. For example, if I have a component "),n("code",null,"MyComponent.vue"),s(" under "),n("code",null,"src/components"),s(" with following content:")]),n("pre",{class:"language-html"},[n("code",{class:"language-html"},[n("span",{class:"token comment"},"<!-- src/components/MyComponent.vue -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),n("span",{class:"token punctuation"},">")]),s("{{ count }}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("ts"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"const"),s(" count"),n("span",{class:"token operator"},":"),s(" number "),n("span",{class:"token operator"},"|"),s(" string "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"data"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" count "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("p",null,[s("Notice that we are using TypeScript in the Vue file, when we do the build, the component will be copied over but with the TypeScript annotation removed along with a "),n("code",null,"MyComponent.vue.d.ts"),s(" generated.")]),n("pre",{class:"language-html"},[n("code",{class:"language-html"},[n("span",{class:"token comment"},"<!-- dist/components/MyComponent.vue -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),n("span",{class:"token punctuation"},">")]),s("{{ count }}"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
`),n("span",{class:"token keyword"},"const"),s(" count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"data"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(" count "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token comment"},"// dist/components/MyComponent.vue.d.ts"),s(`
`),n("span",{class:"token keyword"},"declare"),s(),n("span",{class:"token keyword"},"const"),s(" _default"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function-variable function"},"data"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    count`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token builtin"},"string"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(` _default
`)])]),n("p",null,"This way this allows you to use TypeScript in development while not requiring consumers to also have TypeScript in their setup."),n("p",null,[s("P.S. "),n("code",null,"unbuild"),s(" is working on providing better out-of-box experience by auto infering the entries in "),n("code",null,"package.json"),s(", "),n("a",{href:"https://github.com/unjs/unbuild/issues/3",target:"_blank",rel:"noopener"},"learn more"),s(".")]),n("h2",{id:"context-misalignment",tabindex:"-1"},[s("Context Misalignment "),n("a",{class:"header-anchor",href:"#context-misalignment","aria-hidden":"true"},"#")]),n("p",null,"With either of the tools mentioned above, now we are able to write TypeScript as the single source of truth and made the overall codebase easier to maintain. However, there are still some caveats that you will need to keep an eye on it."),n("p",null,[n("strong",null,[s("In ESM, there is NO "),n("code",null,"__dirname"),s(", "),n("code",null,"__filename"),s(", "),n("code",null,"require"),s(", "),n("code",null,"require.resolve")]),s(". Instead, you will need to use "),n("code",null,"import.meta.url"),s(" and also do some convertion to get the file path string.")]),n("p",null,[s("So since our code will be compiled to both CJS and ESM, it\u2019s better to avoiding using those environment specific context whenever possible. If you do need them, you can refer to my note about "),n("a",{href:"/notes#isomorphic-dirname"},[s("Isomorphic "),n("code",null,"__dirname")]),s(":")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" dirname "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'path'"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" fileURLToPath "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'url'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" _dirname "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"typeof"),s(" __dirname "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},"'undefined'"),s(`
  `),n("span",{class:"token operator"},"?"),s(` __dirname
  `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"dirname"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"fileURLToPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"."),s("meta"),n("span",{class:"token punctuation"},"."),s("url"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("For "),n("code",null,"require"),s(" and "),n("code",null,"require.resolve"),s(", you can use")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" createRequire "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'module'"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token keyword"},"require"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"createRequire"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"."),s("meta"),n("span",{class:"token punctuation"},"."),s("url"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("Some good news, if you are using "),n("code",null,"unbuild"),s(", you can turn on the "),n("code",null,"cjsBridge"),s(" flag and "),n("code",null,"unbuild"),s(" will shims those CJS context in ESM automatically for you!.")]),n("pre",{class:"language-ts"},[n("code",{class:"language-ts"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" defineBuildConfig "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'unbuild'"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token function"},"defineBuildConfig"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  cjsBridge`),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// <--"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("p",null,[s("On the other hand, if you are using "),n("code",null,"tsup"),s(", it will shims ESM\u2019s "),n("code",null,"import.meta.url"),s(" for you in CJS instead.")]),n("h2",{id:"final-words",tabindex:"-1"},[s("Final words "),n("a",{class:"header-anchor",href:"#final-words","aria-hidden":"true"},"#")]),n("p",null,[s("This blog post showcased you only a few features of both tools. Do check their docs for more details. And hope you find these setups useful for building your own libraries. If you have any comments or suggestions, ping me on Twitter "),n("a",{href:"https://twitter.com/antfu7",target:"_blank",rel:"noopener"},"@antfu7"),s(". Happy hacking!")])],-1),y={setup(r,{expose:t}){const a={title:"Publish ESM and CJS in a single package",date:"2021-11-29T16:00:00.000Z",lang:"en",duration:"15min",description:"A short tutorial of shipping both ESM and CJS dual formats in a single NPM package.",meta:[{property:"og:title",content:"Publish ESM and CJS in a single package"},{property:"og:description",content:"A short tutorial of shipping both ESM and CJS dual formats in a single NPM package."},{name:"description",content:"A short tutorial of shipping both ESM and CJS dual formats in a single NPM package."}]};return t({frontmatter:a}),l({title:"Publish ESM and CJS in a single package",meta:[{property:"og:title",content:"Publish ESM and CJS in a single package"},{property:"og:description",content:"A short tutorial of shipping both ESM and CJS dual formats in a single NPM package."},{name:"description",content:"A short tutorial of shipping both ESM and CJS dual formats in a single NPM package."}]}),(d,g)=>{const e=o;return i(),c(e,{frontmatter:a},{default:p(()=>[u]),_:1})}}};export{y as default};
